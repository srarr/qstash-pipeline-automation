{
  "version": 3,
  "sources": ["../../../index.js"],
  "sourceRoot": "C:\\Crew\\Test 01 Trader \u0E10\u0E32\u0E19\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25\\services\\edge-worker\\.wrangler\\tmp\\deploy-LQPUDG",
  "sourcesContent": ["// Cloudflare Worker for concept processing and URL discovery\r\nexport default {\r\n  async fetch(request, env) {\r\n    if (request.method !== 'POST') {\r\n      return new Response('Method not allowed', { status: 405 });\r\n    }\r\n\r\n    try {\r\n      const { concept } = await request.json();\r\n      \r\n      if (!concept) {\r\n        return new Response('Concept required', { status: 400 });\r\n      }\r\n\r\n      // Generate Google-style search queries\r\n      const queries = [\r\n        `${concept} trading`,\r\n        `${concept} pinescript`, \r\n        `${concept} pdf`\r\n      ];\r\n\r\n      const urls = [];\r\n      \r\n      // Mock URL extraction for each query (in production, would fetch real results)\r\n      for (const query of queries) {\r\n        // Simulate search results with mock URLs\r\n        const mockUrls = [\r\n          `https://example.com/search?q=${encodeURIComponent(query)}&result=1`,\r\n          `https://docs.example.com/${concept.toLowerCase()}/trading-guide`,\r\n          `https://forum.example.com/discussion/${concept.toLowerCase()}`\r\n        ];\r\n        urls.push(...mockUrls);\r\n      }\r\n\r\n      // Store URLs in Cloudflare KV\r\n      await env.URLS.put(concept, JSON.stringify(urls));\r\n\r\n      return new Response(JSON.stringify({\r\n        stored: urls.length,\r\n        urls: urls,\r\n        concept: concept\r\n      }), {\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    } catch (error) {\r\n      return new Response(`Error: ${error.message}`, { status: 500 });\r\n    }\r\n  }\r\n};"],
  "mappings": ";AACA,IAAO,gBAAQ;AAAA,EACb,MAAM,MAAM,SAAS,KAAK;AACxB,QAAI,QAAQ,WAAW,QAAQ;AAC7B,aAAO,IAAI,SAAS,sBAAsB,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC3D;AAEA,QAAI;AACF,YAAM,EAAE,QAAQ,IAAI,MAAM,QAAQ,KAAK;AAEvC,UAAI,CAAC,SAAS;AACZ,eAAO,IAAI,SAAS,oBAAoB,EAAE,QAAQ,IAAI,CAAC;AAAA,MACzD;AAGA,YAAM,UAAU;AAAA,QACd,GAAG,OAAO;AAAA,QACV,GAAG,OAAO;AAAA,QACV,GAAG,OAAO;AAAA,MACZ;AAEA,YAAM,OAAO,CAAC;AAGd,iBAAW,SAAS,SAAS;AAE3B,cAAM,WAAW;AAAA,UACf,gCAAgC,mBAAmB,KAAK,CAAC;AAAA,UACzD,4BAA4B,QAAQ,YAAY,CAAC;AAAA,UACjD,wCAAwC,QAAQ,YAAY,CAAC;AAAA,QAC/D;AACA,aAAK,KAAK,GAAG,QAAQ;AAAA,MACvB;AAGA,YAAM,IAAI,KAAK,IAAI,SAAS,KAAK,UAAU,IAAI,CAAC;AAEhD,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,QAAQ,KAAK;AAAA,QACb;AAAA,QACA;AAAA,MACF,CAAC,GAAG;AAAA,QACF,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH,SAAS,OAAO;AACd,aAAO,IAAI,SAAS,UAAU,MAAM,OAAO,IAAI,EAAE,QAAQ,IAAI,CAAC;AAAA,IAChE;AAAA,EACF;AACF;",
  "names": []
}
